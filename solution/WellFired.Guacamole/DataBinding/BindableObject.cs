using System.Collections.Generic;using System.ComponentModel;using WellFired.Guacamole.DataBinding.Converter;using WellFired.Guacamole.DataBinding.Exceptions;namespace WellFired.Guacamole.DataBinding{	public class BindableObject : INotifyPropertyChanged, IBindableObject	{		protected static readonly BindableProperty BindingContextProperty =			BindableProperty.Create<BindableObject, INotifyPropertyChanged>(null, BindingMode.OneWay,				bindableObject => bindableObject.BindingContext);		private readonly Dictionary<string, BindableProperty> _bindings = new Dictionary<string, BindableProperty>();		private readonly Dictionary<BindableProperty, BindableContext> _contexts =			new Dictionary<BindableProperty, BindableContext>();		private readonly Dictionary<string, BindableContext> _targetToContexts =			new Dictionary<string, BindableContext>();		private INotifyPropertyChanged _bindingContext;		public INotifyPropertyChanged BindingContext		{			get => _bindingContext;			set			{				// Here we check for equality so we can avoid recursion.				if (Equals(_bindingContext, value))					return;				if (_bindingContext != null)					_bindingContext.PropertyChanged -= OnPropertyChanged;				_bindingContext = value;				foreach (var bindingKvp in _bindings)				{					var bindableProperty = bindingKvp.Value;					_contexts[bindableProperty].Object = _bindingContext;					var newValue = _contexts[bindableProperty].GetValue();					SetValueFromSource(_contexts[bindableProperty].Property, newValue);				}				OnPropertyChanged(this, new PropertyChangedEventArgs(BindingContextProperty.PropertyName));				_bindingContext.PropertyChanged += OnPropertyChanged;			}		}		public event PropertyChangedEventHandler PropertyChanged;		public void Bind(BindableProperty bindableProperty, string targetProperty, IValueConverter converter)		{			Bind(bindableProperty, targetProperty, null, converter);		}		/// <summary>		/// Bind a Property on an object to this Property.		/// </summary>		/// <param name="bindableProperty"></param>		/// <param name="targetProperty"></param>		/// <param name="bindingMode">If this is not passed, we will default to using the binding monde on the passed property.</param>		/// <param name="converter">An optional converter that will convert from dource type to dest type and vice versa</param>		/// <exception cref="BindingExistsException">The Binding already exists.</exception>		public void Bind(BindableProperty bindableProperty, string targetProperty, BindingMode? bindingMode = null, IValueConverter converter = null)		{			if (_bindings.ContainsKey(bindableProperty.PropertyName))				throw new BindingExistsException(bindableProperty.PropertyName, targetProperty, _contexts[_bindings[bindableProperty.PropertyName]].TargetProperty);			_bindings[bindableProperty.PropertyName] = bindableProperty;			var context = GetOrCreateBindableContext(bindableProperty);			context.Object = BindingContext;			context.TargetProperty = targetProperty;						// Override our InstancedBindingMode, but only if we have provided one to this method.			// otherwise, we take the BindingMode from the BindableProperty			if(bindingMode != null)				context.InstancedBindingMode = bindingMode.Value;						// Override our InstancedConverter, but only if we have provided one to this method.			// otherwise, we take the Converter from the default context			if(converter != null)				context.InstancedConverter = converter;						_targetToContexts[targetProperty] = context;			var initialValue = context.GetValue();			SetValueFromSource(bindableProperty, initialValue);		}		public object GetValue(BindableProperty bindableProperty)		{			return GetOrCreateBindableContext(bindableProperty).Value;		}		private void SetValueFromSource(BindableProperty bindableProperty, object value)		{			var previous = GetOrCreateBindableContext(bindableProperty).Value;			if (Equals(previous, value))				return;			if (!GetOrCreateBindableContext(bindableProperty).SetValueFromSource(value))				return;			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(bindableProperty.PropertyName));		}		public bool SetValue(BindableProperty bindableProperty, object value)		{			var context = GetOrCreateBindableContext(bindableProperty);			if (context.InstancedBindingMode == BindingMode.ReadOnly)				return false;			var previous = GetOrCreateBindableContext(bindableProperty).Value;			if (Equals(previous, value))				return false;			if (!GetOrCreateBindableContext(bindableProperty).SetValueFromDest(value))				return false;			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(bindableProperty.PropertyName));			return true;		}		private BindableContext GetOrCreateBindableContext(BindableProperty bindableProperty)		{			var bindablePropertyContext = GetContext(bindableProperty) ?? CreateAndAddContext(bindableProperty);			return bindablePropertyContext;		}		private BindableContext GetContext(BindableProperty bindableProperty)		{			return _contexts.ContainsKey(bindableProperty) ? _contexts[bindableProperty] : null;		}		private BindableContext CreateAndAddContext(BindableProperty bindableProperty)		{			var bindablePropertyContext = new BindableContext			{				Property = bindableProperty,				InstancedBindingMode = bindableProperty.BindingMode,				Object = _bindingContext			};			bindablePropertyContext.SetValueFromSource(bindableProperty.DefaultValue);			_contexts[bindableProperty] = bindablePropertyContext;			return bindablePropertyContext;		}		protected virtual void OnPropertyChanged(object sender, PropertyChangedEventArgs e)		{			if (!_targetToContexts.ContainsKey(e.PropertyName))				return;			var context = _targetToContexts[e.PropertyName];			var newValue = context.GetValue();			SetValueFromSource(context.Property, newValue);		}	}}